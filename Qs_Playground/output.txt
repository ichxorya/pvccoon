VOID void
IDENTIFIER main
LPAREN (
RPAREN )
LBRACE {
INT int
IDENTIFIER n
SEMICOLON ;
INT int
IDENTIFIER i
SEMICOLON ;
INT int
IDENTIFIER current
SEMICOLON ;
INT int
IDENTIFIER next
SEMICOLON ;
INT int
IDENTIFIER twoaway
SEMICOLON ;
IDENTIFIER putString
LPAREN (
STRINGLITERAL "How many Fibonacci numbers do you want to compute? "
RPAREN )
SEMICOLON ;
IDENTIFIER n
ASSIGN =
IDENTIFIER getInt
LPAREN (
RPAREN )
SEMICOLON ;
IF if
LPAREN (
IDENTIFIER n
LTE <=
INTLITERAL 0
RPAREN )
IDENTIFIER putString
LPAREN (
STRINGLITERAL "The number should be positive.\n"
RPAREN )
SEMICOLON ;
ELSE else
LBRACE {
IDENTIFIER putString
LPAREN (
STRINGLITERAL "\n\n\tI \t Fibonacci(I) \n\t=====================\n"
RPAREN )
SEMICOLON ;
IDENTIFIER next
ASSIGN =
IDENTIFIER current
ASSIGN =
INTLITERAL 1
SEMICOLON ;
FOR for
LPAREN (
IDENTIFIER i
ASSIGN =
INTLITERAL 1
SEMICOLON ;
IDENTIFIER i
LTE <=
IDENTIFIER n
SEMICOLON ;
IDENTIFIER i
ASSIGN =
IDENTIFIER i
PLUS +
INTLITERAL 1
RPAREN )
LBRACE {
IDENTIFIER putString
LPAREN (
STRINGLITERAL "\t"
RPAREN )
SEMICOLON ;
IDENTIFIER putInt
LPAREN (
IDENTIFIER i
RPAREN )
SEMICOLON ;
IDENTIFIER putString
LPAREN (
STRINGLITERAL "\t"
RPAREN )
SEMICOLON ;
IDENTIFIER putIntLn
LPAREN (
IDENTIFIER current
RPAREN )
SEMICOLON ;
IDENTIFIER twoaway
ASSIGN =
IDENTIFIER current
PLUS +
IDENTIFIER next
SEMICOLON ;
IDENTIFIER current
ASSIGN =
IDENTIFIER next
SEMICOLON ;
IDENTIFIER next
ASSIGN =
IDENTIFIER twoaway
SEMICOLON ;
RBRACE }
RBRACE }
RBRACE }

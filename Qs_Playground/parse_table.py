class Transition:
    def __init__(self, statelst):
        self.statelst = statelst


program1                 = Transition(["TYPE", "IDENTIFIER", "DECL", "PROGRAM"])
program2                 = Transition(["e"])
decl1                    = Transition(["(" "PARALIST" ")" "COMPOUNDSTMT"])
decl2                    = Transition(["DECLARATOR" "INITDECLARATOR" "INITDECLARATORLIST" ";"])
initdeclaratorlist1      = Transition(["," "IDENTIFIER" "DECLARATOR" "INITDECLARATOR" "INITDECLARATORLIST"])
initdeclaratorlist2      = Transition(["e"])
initdeclarator1          = Transition(["=" "INITIALISER"])
initdeclarator2          = Transition([e])
declarator1              = Transition(["[" "DECLARATOR" "]"])
declarator2              = Transition(["e"])
subdeclarator1           = Transition(["intliteral"])
subdeclarator2           = Transition(["e"])
initialiser1             = Transition(["EXPR"])
initialiser2             = Transition(["{" "EXPR" "SUBINITIALISER" "}"])
subinitialiser1          = Transition(["," "EXPR" "SUBINITIALISER"])
subinitialiser2          = Transition(["e"])
type1                    = Transition([void])
type2                    = Transition([boolean])
type3                    = Transition([int])
type4                    = Transition([float])
identifier               = Transition([id])
compoundstmt             = Transition([{ VARDECLLST STMTLST }])
vardecllst1              = Transition([TYPE IDENTIFIER DECLARATOR INITDECLARATOR INITDECLARATORLIST ; VARDECLLST])
vardecllst2              = Transition(["e"])
stmtlst1                 = Transition([STMT STMTLST])
stmtlst2                 = Transition(["e"])
stmt1                    = Transition([COMPOUNDSTMT])
stmt2                    = Transition([IFSTMT])
stmt3                    = Transition([FORSTMT])
stmt4                    = Transition([WHILESTMT])
stmt5                    = Transition([BREAKSTMT])
stmt6                    = Transition([CONTINUESTMT])
stmt7                    = Transition([RETURNSTMT])
stmt8                    = Transition([EXPRSTMT])
ifstmt                   = Transition([if ( EXPR ) STMT ELSESTMT])
elsestmt1                = Transition([else STMT])
elsestmt2                = Transition(["e"])
forstmt                  = Transition([for ( MAYBESTMT ; MAYBESTMT ; MAYBESTMT ) STMT])
maybestmt1               = Transition([EXPR])
maybestmt2               = Transition(["e"])
whilestmt3               = Transition([while ( EXPR ) STMT])
breakstmt4               = Transition([break ;])
continuestmt             = Transition([continue ;])
returnstmt               = Transition([return MAYBESTMT ;])
exprstmt1                = Transition([EXPR ;])
exprstmt2                = Transition([;])
expr                     = Transition([CONDOREXPR SUBEXPR ])
subexpr1                 = Transition([= CONDOREXPR SUBEXPR])
subexpr2                 = Transition(["e"])
condorexpr               = Transition([CONDANDEXPR SUBCONDOREXPR])
subcondorexpr1           = Transition([|| CONDANDEXPR SUBCONDOREXPR])
subcondorexpr2           = Transition(["e"])
condandexpr              = Transition([EQUALITYEXPR SUBCONDANDEXPR])
subcondandexpr1          = Transition([&& EQUALITYEXPR SUBCONDANDEXPR])
subcondandexpr2          = Transition(["e"])
equalityexpr             = Transition([RELEXPR SUBEQUALITYEXPR])
subequalityexpr1         = Transition([== RELEXPR SUBEQUALITYEXPR])
subequalityexpr2         = Transition([!= RELEXPR SUBEQUALITYEXPR])
subequalityexpr3         = Transition(["e"])
relexpr                  = Transition([ADDITIVEEXPR SUBRELEXPR])
subrelexpr1              = Transition([< ADDITIVEEXPR SUBRELEXPR])
subrelexpr2              = Transition([<= ADDITIVEEXPR SUBRELEXPR])
subrelexpr3              = Transition([> ADDITIVEEXPR SUBRELEXPR])
subrelexpr4              = Transition([>= ADDITIVEEXPR SUBRELEXPR])
subrelexpr5              = Transition(["e"])
additiveexpr             = Transition([MULTIPLICATIVEEXPR SUBADDITIVEEXPR])
subadditiveexpr1         = Transition([+ MULTIPLICATIVEEXPR SUBADDITIVEEXPR])
subadditiveexpr2         = Transition([- MULTIPLICATIVEEXPR SUBADDITIVEEXPR])
subadditiveexpr3         = Transition(["e"])
multiplicativeexpr       = Transition([UNARYEXPR SUBMULTIPLICATIVEEXPR])
submultiplicativeexpr1   = Transition([* UNARYEXPR SUBMULTIPLICATIVEEXPR])
submultiplicativeexpr2   = Transition([/ UNARYEXPR SUBMULTIPLICATIVEEXPR])
submultiplicativeexpr3   = Transition(["e"])
unaryexpr1               = Transition([+ UNARYEXPR])
unaryexpr2               = Transition([- UNARYEXPR  ])
unaryexpr3               = Transition([! UNARYEXPR])
unaryexpr4               = Transition([PRIMARYEXPR])
primaryexpr1             = Transition([IDENTIFIER SUBPRIMARYEXPR])
primaryexpr2             = Transition([( EXPR ]))
primaryexpr3             = Transition([intliteral])
primaryexpr4             = Transition([floatliteral])
primaryexpr5             = Transition([boolliteral])
primaryexpr6             = Transition([stringliteral])
subprimaryexpr1          = Transition([[ EXPR ]])
subprimaryexpr2          = Transition([( ARGLIST ]))
subprimaryexpr3          = Transition(["e"])
paralist1                = Transition([PROPERPARALIST])
paralist2                = Transition(["e"])
properparalist           = Transition([PARADECL SUBPROPERPARALIST])
subproperparalist1       = Transition([, PARADECL SUBPROPERPARALIST])
subproperparalist2       = Transition(["e"])
paradecl                 = Transition([TYPE DECLARATOR])
arglist1                 = Transition([PROPERARGLIST])
arglist2                 = Transition(["e"])
properarglist            = Transition([EXPR SUBPROPERARGLIST])
subproperarglist1        = Transition([, EXPR SUBPROPERARGLIST])
subproperarglist2        = Transition(["e"])



PROGRAM,TYPE identifier SUBPROGRAM PROGRAM,void int float boolean
PROGRAM,,$
SUBPROGRAM,FUNCDECL,lparen
SUBPROGRAM,VARDECL,void lbracket int float boolean $
FUNCDECL,PARALIST COMPOUNDSTMT,lparen
VARDECL,DECLARATOR SUBVARDECL,while void stringliteral semicolon return rbrace plus not minus lparen lbracket intliteral int if identifier for floatliteral float continue break boolliteral boolean $
SUBVARDECL,INITDECLARATOR SUBSUBSUBVARDECL,assign
SUBVARDECL,INITDECLARATORLIST semicolon,comma
SUBVARDECL,semicolon,semicolon
SUBSUBSUBVARDECL,INITDECLARATORLIST semicolon,comma
SUBSUBSUBVARDECL,semicolon,semicolon
INITDECLARATORLIST,comma identifier DECLARATOR INITDECLARATOR SUBINITDECLARATORLIST,comma
SUBINITDECLARATORLIST,comma identifier DECLARATOR INITDECLARATOR SUBINITDECLARATORLIST,comma
SUBINITDECLARATORLIST,,semicolon
INITDECLARATOR,assign INITIALISER,assign
DECLARATOR,lbracket SUBDECLARATOR,lbracket
DECLARATOR,,semicolon rparen comma assign
SUBDECLARATOR,rbracket,rbracket
SUBDECLARATOR,intliteral rbracket,intliteral
INITIALISER,EXPR,stringliteral plus not minus lparen intliteral identifier floatliteral boolliteral
INITIALISER,lbrace EXPR SUBINITIALISER rbrace,lbrace
SUBINITIALISER,comma EXPR SUBINITIALISER,comma
SUBINITIALISER,,rbrace
COMPOUNDSTMT,lbrace SUBCOMPOUNDSTMT rbrace,lbrace
SUBCOMPOUNDSTMT,SUBCOMPOUNDSTMT2 SUBCOMPOUNDSTMT,void int float boolean
SUBCOMPOUNDSTMT,STMT SUBCOMPOUNDSTMT,while stringliteral semicolon return plus not minus lparen intliteral if identifier for floatliteral continue break boolliteral
SUBCOMPOUNDSTMT,,rbrace
SUBCOMPOUNDSTMT2,TYPE identifier VARDECL,void int float boolean
STMT,IFSTMT,if
STMT,FORSTMT,for
STMT,WHILESTMT,while
STMT,BREAKSTMT,break
STMT,CONTINUESTMT,continue
STMT,RETURNSTMT,return
STMT,EXPRSTMT,stringliteral semicolon plus not minus lparen intliteral identifier floatliteral boolliteral
IFSTMT,if lparen EXPR rparen COMPOUNDSTMT ELSESTMT,if
ELSESTMT,else COMPOUNDSTMT,else
ELSESTMT,,while void stringliteral semicolon return rbrace plus not minus lparen intliteral int if identifier for floatliteral float continue break boolliteral boolean
FORSTMT,for lparen MAYBEEXPR semicolon MAYBEEXPR semicolon MAYBEEXPR rparen COMPOUNDSTMT,for
MAYBEEXPR,EXPR,stringliteral plus not minus lparen intliteral identifier floatliteral boolliteral
MAYBEEXPR,,semicolon rparen
WHILESTMT,while lparen EXPR rparen COMPOUNDSTMT,while
BREAKSTMT,break semicolon,break
CONTINUESTMT,continue semicolon,continue
RETURNSTMT,return MAYBEEXPR semicolon,return
EXPRSTMT,EXPR semicolon,stringliteral plus not minus lparen intliteral identifier floatliteral boolliteral
EXPRSTMT,semicolon,semicolon
EXPR,ASSIGNMENTEXPR,stringliteral plus not minus lparen intliteral identifier floatliteral boolliteral
ASSIGNMENTEXPR,CONDOREXPR SUBASSIGNMENTEXPR,stringliteral plus not minus lparen intliteral identifier floatliteral boolliteral
SUBASSIGNMENTEXPR,assign CONDOREXPR SUBASSIGNMENTEXPR,assign
SUBASSIGNMENTEXPR,,semicolon rparen rbracket rbrace comma
CONDOREXPR,CONDANDEXPR SUBCONDOREXPR,stringliteral plus not minus lparen intliteral identifier floatliteral boolliteral
SUBCONDOREXPR,or CONDANDEXPR SUBCONDOREXPR,or
SUBCONDOREXPR,,semicolon rparen rbracket rbrace comma assign
CONDANDEXPR,EQUALITYEXPR SUBCONDANDEXPR,stringliteral plus not minus lparen intliteral identifier floatliteral boolliteral
SUBCONDANDEXPR,and EQUALITYEXPR SUBCONDANDEXPR,and
SUBCONDANDEXPR,,semicolon rparen rbracket rbrace or comma assign
EQUALITYEXPR,RELEXPR SUBEQUALITYEXPR,stringliteral plus not minus lparen intliteral identifier floatliteral boolliteral
SUBEQUALITYEXPR,eq RELEXPR SUBEQUALITYEXPR,eq
SUBEQUALITYEXPR,neq RELEXPR SUBEQUALITYEXPR,neq
SUBEQUALITYEXPR,,semicolon rparen rbracket rbrace or comma assign and
RELEXPR,ADDITIVEEXPR SUBRELEXPR,stringliteral plus not minus lparen intliteral identifier floatliteral boolliteral
SUBRELEXPR,lt ADDITIVEEXPR SUBRELEXPR,lt
SUBRELEXPR,lte ADDITIVEEXPR SUBRELEXPR,lte
SUBRELEXPR,gt ADDITIVEEXPR SUBRELEXPR,gt
SUBRELEXPR,gte ADDITIVEEXPR SUBRELEXPR,gte
SUBRELEXPR,,semicolon rparen rbracket rbrace or neq eq comma assign and
ADDITIVEEXPR,MULTIPLICATIVEEXPR SUBADDITIVEEXPR,stringliteral plus not minus lparen intliteral identifier floatliteral boolliteral
SUBADDITIVEEXPR,plus MULTIPLICATIVEEXPR SUBADDITIVEEXPR,plus
SUBADDITIVEEXPR,minus MULTIPLICATIVEEXPR SUBADDITIVEEXPR,minus
SUBADDITIVEEXPR,,semicolon rparen rbracket rbrace or neq lte lt gte gt eq comma assign and
MULTIPLICATIVEEXPR,UNARYEXPR SUBMULTIPLICATIVEEXPR,stringliteral plus not minus lparen intliteral identifier floatliteral boolliteral
SUBMULTIPLICATIVEEXPR,star UNARYEXPR SUBMULTIPLICATIVEEXPR,star
SUBMULTIPLICATIVEEXPR,slash UNARYEXPR SUBMULTIPLICATIVEEXPR,slash
SUBMULTIPLICATIVEEXPR,,semicolon rparen rbracket rbrace plus or neq minus lte lt gte gt eq comma assign and
UNARYEXPR,plus UNARYEXPR,plus
UNARYEXPR,minus UNARYEXPR,minus
UNARYEXPR,not UNARYEXPR,not
UNARYEXPR,PRIMARYEXPR,stringliteral lparen intliteral identifier floatliteral boolliteral
PRIMARYEXPR,identifier SUBPRIMARYEXPR,identifier
PRIMARYEXPR,lparen EXPR rparen,lparen
PRIMARYEXPR,intliteral,intliteral
PRIMARYEXPR,floatliteral,floatliteral
PRIMARYEXPR,boolliteral,boolliteral
PRIMARYEXPR,stringliteral,stringliteral
SUBPRIMARYEXPR,ARGLIST,lparen
SUBPRIMARYEXPR,lbracket EXPR rbracket,lbracket
SUBPRIMARYEXPR,,star slash semicolon rparen rbracket rbrace plus or neq minus lte lt gte gt eq comma assign and
PARALIST,lparen PROPERPARALIST rparen,lparen
PROPERPARALIST,PARADECL SUBPROPERPARALIST,void int float boolean
PROPERPARALIST,,rparen
SUBPROPERPARALIST,comma PARADECL SUBPROPERPARALIST,comma
SUBPROPERPARALIST,,rparen
PARADECL,TYPE identifier DECLARATOR,void int float boolean
ARGLIST,lparen PROPERARGLIST rparen,lparen
PROPERARGLIST,ARG SUBPROPERARGLIST,stringliteral plus not minus lparen intliteral identifier floatliteral boolliteral
PROPERARGLIST,,rparen
SUBPROPERARGLIST,comma ARG SUBPROPERARGLIST,comma
SUBPROPERARGLIST,,rparen
ARG,EXPR,stringliteral plus not minus lparen intliteral identifier floatliteral boolliteral
TYPE,boolean,boolean
TYPE,int,int
TYPE,void,void
TYPE,float,float
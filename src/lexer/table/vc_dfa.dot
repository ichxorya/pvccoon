// A few notes:
// Alphabet: [A-Za-z_] = [A-Z] + [a-z] + [_]
// Alphanumeric: [A-Za-z0-9_] = Alphabet + [0-9]
  
digraph vc_dfa {
  /**
   * Graph layout: Left to right.
   * Line style: Straight lines.
   */
  rankdir = LR;
  splines = polyline;


  /**
   * States.
   */
  // Start state.
  node [shape = point];
  start;
  node [shape = circle];
  start_state [label = "0"];

  start -> start_state;
  node [shape = doublecircle; color = red];
  state_error [label = "69420"]; // Error.

  node [shape = doublecircle; color = black];
  state_identifier [label = "6969"]; // Identifier.
  state_eof [label = "999"]; // End of file.
  
  // Note: Stop states are either:
  // 1. A keyword.
  // 2. A valid identifier.
  // 3. A valid number (integer/float).
  // 4. A valid operator.
  // 5. A valid separator.
  // 6. A valid string.
  // 7. A valid comment.

  // Start-to-EOF.
  start_state -> state_eof [label = "End Of File"];

  // Start-to-identifier.
  start_state -> state_identifier [label = "[A-Za-z_]"];
  state_identifier -> state_identifier [label = "[\\W]"];

  // Keywords/Identifiers.
  state_b [label = "1"];
  start_state -> state_b [label = "b"];
  state_bo [label = "2"];
  state_b -> state_bo [label = "o"];
  state_boo [label = "3"];
  state_bo -> state_boo [label = "o"];
  state_bool [label = "4"];
  state_boo -> state_bool [label = "l"];
  state_boole [label = "5"];
  state_bool -> state_boole [label = "e"];
  state_boolea [label = "6"];
  state_boole -> state_boolea [label = "a"];
  state_boolean [label = "7"]; // Keyword: boolean.
  state_boolea -> state_boolean [label = "n"];

  state_br [label = "8"];
  state_b -> state_br [label = "r"];
  state_bre [label = "9"];
  state_br -> state_bre [label = "e"];
  state_brea [label = "10"];
  state_bre -> state_brea [label = "a"];
  state_break [label = "11"]; // Keyword: break.
  state_brea -> state_break [label = "k"];

  state_c [label = "12"];
  start_state -> state_c [label = "c"];
  state_co [label = "13"];
  state_c -> state_co [label = "o"];
  state_con [label = "14"];
  state_co -> state_con [label = "n"];
  state_cont [label = "15"];
  state_con -> state_cont [label = "t"];
  state_conti [label = "16"];
  state_cont -> state_conti [label = "i"];
  state_contin [label = "17"];
  state_conti -> state_contin [label = "n"];
  state_continu [label = "18"];
  state_contin -> state_continu [label = "u"];
  state_continue [label = "19"]; // Keyword: continue.
  state_continu -> state_continue [label = "e"];

  state_e [label = "20"];
  start_state -> state_e [label = "e"];
  state_el [label = "21"];
  state_e -> state_el [label = "l"];
  state_els [label = "22"];
  state_el -> state_els [label = "s"];
  state_else [label = "23"]; // Keyword: else.
  state_els -> state_else [label = "e"];

  state_f [label = "24"];
  start_state -> state_f [label = "f"];
  state_fa [label = "25"];
  state_f -> state_fa [label = "a"];
  state_fal [label = "26"];
  state_fa -> state_fal [label = "l"];
  state_fals [label = "27"];
  state_fal -> state_fals [label = "s"];
  state_false [label = "28"]; // Keyword: false.
  state_fals -> state_false [label = "e"];

  state_fo [label = "29"];
  state_f -> state_fo [label = "o"];
  state_for [label = "30"]; // Keyword: for.
  state_fo -> state_for [label = "r"];

  state_i [label = "31"];
  start_state -> state_i [label = "i"];
  state_in [label = "32"];
  state_i -> state_in [label = "n"];
  state_int [label = "33"]; // Keyword: int.
  state_in -> state_int [label = "t"];

  state_r [label = "34"];
  start_state -> state_r [label = "r"];
  state_re [label = "35"];
  state_r -> state_re [label = "e"];
  state_ret [label = "36"];
  state_re -> state_ret [label = "t"];
  state_retu [label = "37"];
  state_ret -> state_retu [label = "u"];
  state_retur [label = "38"];
  state_retu -> state_retur [label = "r"];
  state_return [label = "39"]; // Keyword: return.
  state_retur -> state_return [label = "n"];

  state_t [label = "40"];
  start_state -> state_t [label = "t"];
  state_tr [label = "41"];
  state_t -> state_tr [label = "r"];
  state_tru [label = "42"];
  state_tr -> state_tru [label = "u"];
  state_true [label = "43"]; // Keyword: true.
  state_tru -> state_true [label = "e"];

  state_v [label = "44"];
  start_state -> state_v [label = "v"];
  state_vo [label = "45"];
  state_v -> state_vo [label = "o"];
  state_voi [label = "46"];
  state_vo -> state_voi [label = "i"];
  state_void [label = "47"]; // Keyword: void.
  state_voi -> state_void [label = "d"];

  state_w [label = "48"];
  start_state -> state_w [label = "w"];
  state_wh [label = "49"];
  state_w -> state_wh [label = "h"];
  state_whi [label = "50"];
  state_wh -> state_whi [label = "i"];
  state_whil [label = "51"];
  state_whi -> state_whil [label = "l"];
  state_while [label = "52"]; // Keyword: while.
  state_whil -> state_while [label = "e"];

  // Identifiers from invalid keywords.
  state_b -> state_identifier [label = "Alphanumeric except 'o' and 'r'"];
  state_bo -> state_identifier [label = "Alphanumeric except 'o'"];
  state_boo -> state_identifier [label = "Alphanumeric except 'l'"];
  state_bool -> state_identifier [label = "Alphanumeric except 'e'"];
  state_boole -> state_identifier [label = "Alphanumeric except 'a'"];
  state_boolea -> state_identifier [label = "Alphanumeric except 'n'"];
  state_boolean -> state_identifier [label = "Alphanumeric"];

  state_br -> state_identifier [label = "Alphanumeric except 'e'"];
  state_bre -> state_identifier [label = "Alphanumeric except 'a'"]; 
  state_brea -> state_identifier [label = "Alphanumeric except 'k'"];
  state_break -> state_identifier [label = "Alphanumeric"];

  state_c -> state_identifier [label = "[^\\Wo]"];
  state_co -> state_identifier [label = "[^\\Wn]"];
  state_con -> state_identifier [label = "[^\\Wt]"];
  state_cont -> state_identifier [label = "[^\\Wi]"];
  state_conti -> state_identifier [label = "[^\\Wn]"];
  state_contin -> state_identifier [label = "[^\\Wu]"];
  state_continu -> state_identifier [label = "[^\\We]"];
  state_continue -> state_identifier [label = "[\\W]"];

  state_e -> state_identifier [label = "[^\\Wl]"];
  state_el -> state_identifier [label = "[^\\Ws]"];
  state_els -> state_identifier [label = "[^\\We]"];
  state_else -> state_identifier [label = "[\\W]"];

  state_f -> state_identifier [label = "[^\\Wao]"];
  state_fa -> state_identifier [label = "[^\\Wl]"];
  state_fal -> state_identifier [label = "[^\\Ws]"];
  state_fals -> state_identifier [label = "[^\\We]"];
  state_false -> state_identifier [label = "[\\W]"];

  state_fo -> state_identifier [label = "[^\\Wr]"];
  state_for -> state_identifier [label = "[\\W]"];

  state_i -> state_identifier [label = "[^\\Wn]"];
  state_in -> state_identifier [label = "[^\\Wt]"];
  state_int -> state_identifier [label = "[\\W]"];

  state_r -> state_identifier [label = "[^\\We]"];
  state_re -> state_identifier [label = "[^\\Wt]"];
  state_ret -> state_identifier [label = "[^\\Wu]"];
  state_retu -> state_identifier [label = "[^\\Wr]"];
  state_retur -> state_identifier [label = "[^\\Wn]"];
  state_return -> state_identifier [label = "[\\W]"];

  state_t -> state_identifier [label = "[^\\Wr]"];
  state_tr -> state_identifier [label = "[^\\Wu]"];
  state_tru -> state_identifier [label = "[^\\We]"];
  state_true -> state_identifier [label = "[\\W]"];

  state_v -> state_identifier [label = "[^\\Wo]"];
  state_vo -> state_identifier [label = "[^\\Wi]"];
  state_voi -> state_identifier [label = "[^\\Wd]"];
  state_void -> state_identifier [label = "[\\W]"];

  state_w -> state_identifier [label = "[^\\Wh]"];
  state_wh -> state_identifier [label = "[^\\Wi]"];
  state_whi -> state_identifier [label = "[^\\Wl]"];
  state_whil -> state_identifier [label = "[^\\We]"];
  state_while -> state_identifier [label = "[\\W]"];

  // Errors from invalid keywords.
  // Should not be error if the label is 
  state_b -> state_error [label = "[^\\W]"];
  state_bo -> state_error [label = "[^\\W]"];
  state_boo -> state_error [label = "[^\\W]"];
  state_bool -> state_error [label = "[^\\W]"];
  state_boole -> state_error [label = "[^\\W]"];
  state_boolea -> state_error [label = "[^\\W]"];
  state_boolean -> state_error [label = "[^\\W]"];

  state_br -> state_error [label = "[^\\W]"];
  state_bre -> state_error [label = "[^\\W]"];
  state_brea -> state_error [label = "[^\\W]"];
  state_break -> state_error [label = "[^\\W]"];

  state_c -> state_error [label = "[^\\W]"];
  state_co -> state_error [label = "[^\\W]"];
  state_con -> state_error [label = "[^\\W]"];
  state_cont -> state_error [label = "[^\\W]"];
  state_conti -> state_error [label = "[^\\W]"];
  state_contin -> state_error [label = "[^\\W]"];
  state_continu -> state_error [label = "[^\\W]"];
  state_continue -> state_error [label = "[^\\W]"];

  state_e -> state_error [label = "[^\\W]"];
  state_el -> state_error [label = "[^\\W]"];
  state_els -> state_error [label = "[^\\W]"];
  state_else -> state_error [label = "[^\\W]"];

  state_f -> state_error [label = "[^\\W]"];
  state_fa -> state_error [label = "[^\\W]"];
  state_fal -> state_error [label = "[^\\W]"];
  state_fals -> state_error [label = "[^\\W]"];
  state_false -> state_error [label = "[^\\W]"];

  state_fo -> state_error [label = "[^\\W]"];
  state_for -> state_error [label = "[^\\W]"];

  state_i -> state_error [label = "[^\\W]"];
  state_in -> state_error [label = "[^\\W]"];
  state_int -> state_error [label = "[^\\W]"];

  state_r -> state_error [label = "[^\\W]"];
  state_re -> state_error [label = "[^\\W]"];
  state_ret -> state_error [label = "[^\\W]"];
  state_retu -> state_error [label = "[^\\W]"];
  state_retur -> state_error [label = "[^\\W]"];
  state_return -> state_error [label = "[^\\W]"];

  state_t -> state_error [label = "[^\\W]"];
  state_tr -> state_error [label = "[^\\W]"];
  state_tru -> state_error [label = "[^\\W]"];
  state_true -> state_error [label = "[^\\W]"];

  state_v -> state_error [label = "[^\\W]"];
  state_vo -> state_error [label = "[^\\W]"];
  state_voi -> state_error [label = "[^\\W]"];
  state_void -> state_error [label = "[^\\W]"];

  state_w -> state_error [label = "[^\\W]"];
  state_wh -> state_error [label = "[^\\W]"];
  state_whi -> state_error [label = "[^\\W]"];
  state_whil -> state_error [label = "[^\\W]"];
  state_while -> state_error [label = "[^\\W]"];

  
}
digraph vc_dfa {
    /* Graph layout: Left to right. */
    rankdir=LR;

    /* States. */
    // Start state.
    node [shape = point]; 
        start;
    node [shape = circle]; 
        state_start [label = "0"];

    // 20 states per block.
    node [shape = circle] {
        state_b [label = "1"];
        state_c [label = "4"];
        state_e [label = "6"];
        state_f [label = "8"];
        state_i [label = "11"];
        state_r [label = "14"];
        state_t [label = "16"];
        state_v [label = "18"];
        state_w [label = "20"];
    }
    
    // Accepting states.
    node [shape = doublecircle] {
        state_boolean [label = "2", width = 1];
        state_break [label = "3", width = 1];
        state_continue [label = "5", width = 1];
        state_else [label = "7", width = 1];
        state_false [label = "9", width = 1];
        state_for [label = "10", width = 1];
        state_if [label = "12", width = 1];
        state_int [label = "13", width = 1];
        state_return [label = "15", width = 1];
        state_true [label = "17", width = 1];
        state_void [label = "19", width = 1];
        state_while [label = "21", width = 1];
    } 

    // Error state.
    node [shape = doublecircle, color = red];
        state_error [label = "420"];

    // Transitions.
    start -> state_start [label = "start"];
    
    // Boolean
    state_start -> state_b [label = "b"];
    state_b -> state_error [label = "invalid characters"];
    state_b -> state_boolean [label = "oolean"];
    state_boolean -> state_error [label = "invalid characters"];

    // Break
    state_b -> state_break [label = "reak"];
    state_break -> state_error [label = "invalid characters"];
    
    // Continue
    state_start -> state_c [label = "c"];
    state_c -> state_error [label = "invalid characters"];
    state_c -> state_continue [label = "ontinue"];
    state_continue -> state_error [label = "invalid characters"];

    // Else
    state_start -> state_e [label = "e"];
    state_e -> state_error [label = "invalid characters"];
    state_e -> state_else [label = "lse"];
    state_else -> state_error [label = "invalid characters"];

    // False
    state_start -> state_f [label = "f"];
    state_f -> state_error [label = "invalid characters"];
    state_f -> state_false [label = "alse"];
    state_false -> state_error [label = "invalid characters"];

    // For
    state_f -> state_for [label = "or"];
    state_for -> state_error [label = "invalid characters"];

    // If
    state_start -> state_i [label = "i"];
    state_i -> state_error [label = "invalid characters"];
    state_i -> state_if [label = "f"];
    state_if -> state_error [label = "invalid characters"];

    // Int
    state_i -> state_int [label = "nt"];
    state_int -> state_error [label = "invalid characters"];

    // Return
    state_start -> state_r [label = "r"];
    state_r -> state_error [label = "invalid characters"];
    state_r -> state_return [label = "eturn"];
    state_return -> state_error [label = "invalid characters"];

    // True
    state_start -> state_t [label = "t"];
    state_t -> state_true [label = "rue"];
    state_true -> state_error [label = "invalid characters"];

    // Void
    state_start -> state_v [label = "v"];
    state_v -> state_error [label = "invalid characters"];
    state_v -> state_void [label = "oid"];
    state_void -> state_error [label = "invalid characters"];

    // While
    state_start -> state_w [label = "w"];
    state_w -> state_error [label = "invalid characters"];
    state_w -> state_while [label = "hile"];
    state_while -> state_error [label = "invalid characters"];
}
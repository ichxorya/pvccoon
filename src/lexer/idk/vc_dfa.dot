digraph vc_dfa {
    /* Graph layout: Left to right. */
    rankdir=LR;

    /* States. */
    // Start state.
    node [shape = point]; 
        start;
    node [shape = circle]; 
        state_start [label = "0"];
    
    // Other states.
    node [shape = circle] {
        // First letter of a keyword.
        state_b [label = "1"];
        state_c [label = "2"];
        state_e [label = "3"];
        state_f [label = "4"];
        state_i [label = "5"];
        state_r [label = "6"];
        state_t [label = "7"];
        state_v [label = "8"];
        state_w [label = "9"];

        // Second+ letters of a keyword.
        state_bo [label = "10"];
        state_boo [label = "11"];
        state_bool [label = "12"];
        state_boole [label = "13"];
        state_boolea [label = "14"];

        state_br [label = "16"];
        state_bre [label = "17"];
        state_brea [label = "18"];

        state_co [label = "20"];
        state_con [label = "21"];
        state_cont [label = "22"];
        state_conti [label = "23"];
        state_contin [label = "24"];
        state_continu [label = "25"];

        state_el [label = "27"];
        state_els [label = "28"];

        state_fa [label = "30"];
        state_fal [label = "31"];
        state_fals [label = "32"];
        
        state_fo [label = "34"];

        state_in [label = "37"];

        state_re [label = "39"];
        state_ret [label = "40"];
        state_retu [label = "41"];
        state_retur [label = "42"];

        state_tr [label = "44"];
        state_tru [label = "45"];

        state_vo [label = "47"];
        state_voi [label = "48"];
        
        state_wh [label = "50"];
        state_whi [label = "51"];
        state_whil [label = "52"];
    }

    // Accepting states.
    node [shape = doublecircle] {
        state_boolean [label = "15"];
        state_break [label = "19"];
        state_continue [label = "26"];
        state_else [label = "29"];
        state_false [label = "33"];
        state_for [label = "35"];
        state_if [label = "36"];
        state_int [label = "38"];
        state_return [label = "43"];
        state_true [label = "46"];
        state_void [label = "49"];
        state_while [label = "53"];
    } 

    // Error state.
    node [shape = doublecircle, color = red];
        state_error [label = "420"];

    // Transitions.
    start -> state_start [label = "start"];
    
    // Boolean
    state_start -> state_b [label = "b"];
    state_b -> state_bo [label = "o"];
    state_bo -> state_boo [label = "o"];
    state_boo -> state_bool [label = "l"];
    state_bool -> state_boole [label = "e"];
    state_boole -> state_boolea [label = "a"];
    state_boolea -> state_boolean [label = "n"];

    state_b -> state_error [label = "[^or]"];
    state_bo -> state_error [label = "[^o]"];
    state_boo -> state_error [label = "[^l]"];
    state_bool -> state_error [label = "[^e]"];
    state_boole -> state_error [label = "[^a]"];
    state_boolea -> state_error [label = "[^n]"];
    state_boolean -> state_error [label = "."];

    // Break
    state_b -> state_br [label = "r"];
    state_br -> state_bre [label = "e"];
    state_bre -> state_brea [label = "a"];
    state_brea -> state_break [label = "k"];

    state_br -> state_error [label = "[^e]"];
    state_bre -> state_error [label = "[^a]"];
    state_brea -> state_error [label = "[^k]"];
    state_break -> state_error [label = "."];
    
    // Continue
    state_start -> state_c [label = "c"];
    state_c -> state_co [label = "o"];
    state_co -> state_con [label = "n"];
    state_con -> state_cont [label = "t"];
    state_cont -> state_conti [label = "i"];
    state_conti -> state_contin [label = "n"];
    state_contin -> state_continu [label = "u"];
    state_continu -> state_continue [label = "e"];
    
    state_c -> state_error [label = "[^o]"];
    state_co -> state_error [label = "[^n]"];
    state_con -> state_error [label = "[^t]"];
    state_cont -> state_error [label = "[^i]"];
    state_conti -> state_error [label = "[^n]"];
    state_contin -> state_error [label = "[^u]"];
    state_continu -> state_error [label = "[^e]"];
    state_continue -> state_error [label = "."];

    // Else
    state_start -> state_e [label = "e"];
    state_e -> state_el [label = "l"];
    state_el -> state_els [label = "s"];
    state_els -> state_else [label = "e"];

    state_e -> state_error [label = "[^l]"];
    state_el -> state_error [label = "[^s]"];
    state_els -> state_error [label = "[^e]"];
    state_else -> state_error [label = "."];

    // False
    state_start -> state_f [label = "f"];
    state_f -> state_fa [label = "a"];
    state_fa -> state_fal [label = "l"];
    state_fal -> state_fals [label = "s"];
    state_fals -> state_false [label = "e"];
    
    state_f -> state_error [label = "[^ao]"];
    state_fa -> state_error [label = "[^l]"];
    state_fal -> state_error [label = "[^s]"];
    state_fals -> state_error [label = "[^e]"];
    state_false -> state_error [label = "."];

    // For
    state_f -> state_fo [label = "o"];
    state_fo -> state_for [label = "r"];

    state_fo -> state_error [label = "[^r]"];
    state_for -> state_error [label = "."];

    // If
    state_start -> state_i [label = "i"];
    state_i -> state_if [label = "f"];

    state_i -> state_error [label = "[^fn]"];
    state_if -> state_error [label = "."];

    // Int
    state_i -> state_in [label = "n"];
    state_in -> state_int [label = "t"];

    state_in -> state_error [label = "[^t]"];
    state_int -> state_error [label = "."];

    // Return
    state_start -> state_r [label = "r"];
    state_r -> state_re [label = "e"];
    state_re -> state_ret [label = "t"];
    state_ret -> state_retu [label = "u"];
    state_retu -> state_retur [label = "r"];
    state_retur -> state_return [label = "n"];

    state_r -> state_error [label = "[^e]"];
    state_re -> state_error [label = "[^t]"];
    state_ret -> state_error [label = "[^u]"];
    state_retu -> state_error [label = "[^r]"];
    state_retur -> state_error [label = "[^n]"];
    state_return -> state_error [label = "."];

    // True
    state_start -> state_t [label = "t"];
    state_t -> state_tr [label = "r"];
    state_tr -> state_tru [label = "u"];
    state_tru -> state_true [label = "e"];

    state_t -> state_error [label = "[^r]"];
    state_tr -> state_error [label = "[^u]"];
    state_tru -> state_error [label = "[^e]"];
    state_true -> state_error [label = "."];

    // Void
    state_start -> state_v [label = "v"];
    state_v -> state_vo [label = "o"];
    state_vo -> state_voi [label = "i"];
    state_voi -> state_void [label = "d"];

    state_v -> state_error [label = "[^o]"];
    state_vo -> state_error [label = "[^i]"];
    state_voi -> state_error [label = "[^d]"];
    state_void -> state_error [label = "."];

    // While
    state_start -> state_w [label = "w"];
    state_w -> state_wh [label = "h"];
    state_wh -> state_whi [label = "i"];
    state_whi -> state_whil [label = "l"];
    state_whil -> state_while [label = "e"];

    state_w -> state_error [label = "[^h]"];
    state_wh -> state_error [label = "[^i]"];
    state_whi -> state_error [label = "[^l]"];
    state_whil -> state_error [label = "[^e]"];
    state_while -> state_error [label = "."];
}